{"version":3,"file":"ApneaIndexDistribution-BQYTpf0r.js","sources":["../../src/Pages/Elderlies/Components/TabContents/Sleep/Components/ApneaIndexDistribution.jsx"],"sourcesContent":["import { useState, useEffect, useContext, useCallback } from \"react\";\r\nimport { getApneaIndexStatistic } from \"@/api/deviceReports\";\r\nimport ls from \"store2\";\r\nimport { numberData } from \"./mockData\";\r\nimport BarChart from \"@/Components/GraphAndChart/barChart\";\r\nimport Template from \"@/Components/GraphAndChartTemp/Template\";\r\nimport dayjs from \"dayjs\";\r\nimport { getTemplateData } from \"@/Pages/Elderlies/Components/Utiles/utiles\";\r\nimport { CustomContext } from \"@/Context/UseCustomContext\";\r\nexport default function ApneaIndexDistribution() {\r\n  const { title, color, icon, dataAnalysis } = getTemplateData(\r\n    \"Apnea Index Distribution\"\r\n  );\r\n  const context = useContext(CustomContext);\r\n  const {\r\n    chartToDate = \"\",\r\n    chartFromDate = \"\",\r\n    elderlyDetails,\r\n  } = context || {};\r\n  const [toDate, setToDate] = useState(\r\n    dayjs().subtract(1, \"day\").format(\"YYYY-MM-DD\")\r\n  );\r\n  const [fromDate, setFromDate] = useState(\r\n    dayjs().subtract(31, \"day\").format(\"YYYY-MM-DD\")\r\n  );\r\n\r\n  const [apneaIndexStatisticData, setApneaIndexStatisticData] = useState([]);\r\n  const getApneaIndexStatisticData = useCallback(() => {\r\n    getApneaIndexStatistic({\r\n      uids: elderlyDetails?.bedRoomIds,\r\n      elderly_id: elderlyDetails._id,\r\n      to_date: fromDate,\r\n      from_date: toDate,\r\n    })\r\n      .then((res) => {\r\n        setApneaIndexStatisticData(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, [toDate, elderlyDetails]);\r\n  useEffect(() => {\r\n    getApneaIndexStatisticData();\r\n  }, [getApneaIndexStatisticData]);\r\n  useEffect(() => {\r\n    if (chartToDate && chartFromDate) {\r\n      setToDate(chartToDate);\r\n      setFromDate(chartFromDate);\r\n    }\r\n  }, [chartToDate]);\r\n  return (\r\n    <Template\r\n      title={title}\r\n      color={color}\r\n      icon={icon}\r\n      dataAnalysis={dataAnalysis}\r\n      isSummaryBtn={false}\r\n    >\r\n      <BarChart\r\n        data={apneaIndexStatisticData}\r\n        color={color}\r\n        dataType=\"percentage\"\r\n        fromDate={\"\"}\r\n        toDate={\"\"}\r\n        dataUnit=\" \"\r\n        xUnit=\"number\"\r\n        chartFor=\"apneaIndexDistribution\"\r\n      />\r\n    </Template>\r\n  );\r\n}\r\n"],"names":["ApneaIndexDistribution","title","color","icon","dataAnalysis","getTemplateData","context","useContext","CustomContext","chartToDate","chartFromDate","elderlyDetails","toDate","setToDate","useState","dayjs","fromDate","setFromDate","apneaIndexStatisticData","setApneaIndexStatisticData","getApneaIndexStatisticData","useCallback","getApneaIndexStatistic","res","err","useEffect","jsx","Template","BarChart"],"mappings":"8mBASA,SAAwBA,GAAyB,CAC/C,KAAM,CAAE,MAAAC,EAAO,MAAAC,EAAO,KAAAC,EAAM,aAAAC,CAAiB,EAAAC,EAC3C,0BAAA,EAEIC,EAAUC,aAAWC,CAAa,EAClC,CACJ,YAAAC,EAAc,GACd,cAAAC,EAAgB,GAChB,eAAAC,CAAA,EACEL,GAAW,CAAA,EACT,CAACM,EAAQC,CAAS,EAAIC,EAAA,SAC1BC,IAAQ,SAAS,EAAG,KAAK,EAAE,OAAO,YAAY,CAAA,EAE1C,CAACC,EAAUC,CAAW,EAAIH,EAAA,SAC9BC,IAAQ,SAAS,GAAI,KAAK,EAAE,OAAO,YAAY,CAAA,EAG3C,CAACG,EAAyBC,CAA0B,EAAIL,EAAA,SAAS,CAAE,CAAA,EACnEM,EAA6BC,EAAAA,YAAY,IAAM,CAC5BC,EAAA,CACrB,KAAMX,GAAA,YAAAA,EAAgB,WACtB,WAAYA,EAAe,IAC3B,QAASK,EACT,UAAWJ,CAAA,CACZ,EACE,KAAMW,GAAQ,CACbJ,EAA2BI,EAAI,IAAI,CAAA,CACpC,EACA,MAAOC,GAAQ,CACd,QAAQ,IAAIA,CAAG,CAAA,CAChB,CAAA,EACF,CAACZ,EAAQD,CAAc,CAAC,EAC3Bc,OAAAA,EAAAA,UAAU,IAAM,CACaL,GAAA,EAC1B,CAACA,CAA0B,CAAC,EAC/BK,EAAAA,UAAU,IAAM,CACVhB,GAAeC,IACjBG,EAAUJ,CAAW,EACrBQ,EAAYP,CAAa,EAC3B,EACC,CAACD,CAAW,CAAC,EAEdiB,EAAA,IAACC,EAAA,CACC,MAAA1B,EACA,MAAAC,EACA,KAAAC,EACA,aAAAC,EACA,aAAc,GAEd,SAAAsB,EAAA,IAACE,EAAA,CACC,KAAMV,EACN,MAAAhB,EACA,SAAS,aACT,SAAU,GACV,OAAQ,GACR,SAAS,IACT,MAAM,SACN,SAAS,wBAAA,CACX,CAAA,CAAA,CAGN"}