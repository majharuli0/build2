{"version":3,"file":"SleepEvents-D026P1jv.js","sources":["../../src/Pages/Elderlies/Components/TabContents/Sleep/Components/SleepEvents.jsx"],"sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport TimelineBar from \"@/Components/GraphAndChart/TimelineBar\";\r\nimport { getSleepEvents } from \"@/api/deviceReports\";\r\nimport { FaTimeline } from \"react-icons/fa6\";\r\nimport Template from \"@/Components/GraphAndChartTemp/Template\";\r\nimport { SidebarContext } from \"@/Context/CustomContext\";\r\nimport { transformTime } from \"@/utils/helper\";\r\nimport { CustomContext } from \"@/Context/UseCustomContext\";\r\nimport SkeletonSleepingTimeline from \"@/components/Skeleton/SkeletonSleepingTimeline\";\r\nimport { formatTimeWithSuffix } from \"../../../../../../utils/helper\";\r\n\r\nconst EventItem = ({ count, eventName, color }) => {\r\n  return (\r\n    <div\r\n      className={`flex p-[4px] pr-4 items-center gap-2 rounded-xl`}\r\n      style={{ backgroundColor: color }}\r\n    >\r\n      <span className=\"text-[17px] p-2 py-1 font-bold bg-white rounded-[9px] text-primary\">\r\n        {count}\r\n      </span>\r\n      <span className=\"text-[15px] font-medium text-white leading-[1.2]\">\r\n        {eventName}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default function SleepEvents() {\r\n  const { sleepEventsType, sleepEventsColor } = useContext(SidebarContext);\r\n  const { sleepData, elderlyDetails, sleepDataLoading } =\r\n    useContext(CustomContext);\r\n  const [eventCounts, setEventCounts] = useState([]);\r\n\r\n  const summaryProps = {\r\n    title: \"Sleep Events Summary\",\r\n    pickerTypes: [\"day\", \"range\"],\r\n    chartType: \"multibar_sleep_events\",\r\n    dataType: \"time\",\r\n    color: \"#FF725E\",\r\n    apisProps: {\r\n      endpoint: getSleepEvents,\r\n      query: {\r\n        uids: elderlyDetails?.bedRoomIds,\r\n      },\r\n    },\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (sleepData?.alarm_events) {\r\n      const alarmEventCounts = sleepData?.alarm_events.reduce((acc, event) => {\r\n        const eventName = sleepEventsType[event.event_type];\r\n        const existingEvent = acc.find((e) => e.event_name === eventName);\r\n        if (existingEvent) {\r\n          existingEvent.count += 1;\r\n        } else {\r\n          acc.push({\r\n            event_name: eventName,\r\n            count: 1,\r\n            color: sleepEventsColor[eventName],\r\n          });\r\n        }\r\n        return acc;\r\n      }, []);\r\n      setEventCounts(alarmEventCounts);\r\n    }\r\n  }, [sleepData, sleepEventsType, sleepEventsColor]);\r\n\r\n  return (\r\n    <Template\r\n      title=\"Sleep Events\"\r\n      color=\"#FF725E\"\r\n      icon={<FaTimeline />}\r\n      isDataAnalysis={false}\r\n      headerClassName=\"!text-2xl\"\r\n      summaryProps={summaryProps}\r\n    >\r\n      {sleepDataLoading ? (\r\n        <SkeletonSleepingTimeline />\r\n      ) : (\r\n        <>\r\n          <TimelineBar\r\n            alarmEvents={sleepData?.alarm_events}\r\n            enterBedTime={formatTimeWithSuffix(sleepData?.get_bed_idx)}\r\n            getupAfterTime={formatTimeWithSuffix(sleepData?.leave_bed_idx)}\r\n            noDataText=\"No Data Detected for Today\"\r\n          />\r\n          <div className=\"flex flex-wrap gap-4 items-center justify-center\">\r\n            {eventCounts.map((event, index) => (\r\n              <EventItem\r\n                key={index}\r\n                count={event.count}\r\n                eventName={event.event_name}\r\n                color={event.color}\r\n              />\r\n            ))}\r\n          </div>\r\n        </>\r\n      )}\r\n    </Template>\r\n  );\r\n}\r\n"],"names":["EventItem","count","eventName","color","jsxs","jsx","SleepEvents","sleepEventsType","sleepEventsColor","useContext","SidebarContext","sleepData","elderlyDetails","sleepDataLoading","CustomContext","eventCounts","setEventCounts","useState","summaryProps","getSleepEvents","useEffect","alarmEventCounts","acc","event","existingEvent","e","Template","FaTimeline","SkeletonSleepingTimeline","Fragment","TimelineBar","formatTimeWithSuffix","index"],"mappings":"wlBAWA,MAAMA,EAAY,CAAC,CAAE,MAAAC,EAAO,UAAAC,EAAW,MAAAC,KAEnCC,EAAA,KAAC,MAAA,CACC,UAAW,kDACX,MAAO,CAAE,gBAAiBD,CAAM,EAEhC,SAAA,CAACE,EAAA,IAAA,OAAA,CAAK,UAAU,qEACb,SACHJ,EAAA,EACCI,EAAA,IAAA,OAAA,CAAK,UAAU,mDACb,SACHH,EAAA,CAAA,CAAA,CAAA,EAKN,SAAwBI,GAAc,CACpC,KAAM,CAAE,gBAAAC,EAAiB,iBAAAC,CAAiB,EAAIC,aAAWC,CAAc,EACjE,CAAE,UAAAC,EAAW,eAAAC,EAAgB,iBAAAC,CAAiB,EAClDJ,EAAAA,WAAWK,CAAa,EACpB,CAACC,EAAaC,CAAc,EAAIC,EAAA,SAAS,CAAE,CAAA,EAE3CC,EAAe,CACnB,MAAO,uBACP,YAAa,CAAC,MAAO,OAAO,EAC5B,UAAW,wBACX,SAAU,OACV,MAAO,UACP,UAAW,CACT,SAAUC,EACV,MAAO,CACL,KAAMP,GAAA,YAAAA,EAAgB,UACxB,CACF,CAAA,EAGFQ,OAAAA,EAAAA,UAAU,IAAM,CACd,GAAIT,GAAA,MAAAA,EAAW,aAAc,CAC3B,MAAMU,EAAmBV,GAAA,YAAAA,EAAW,aAAa,OAAO,CAACW,EAAKC,IAAU,CAChE,MAAArB,EAAYK,EAAgBgB,EAAM,UAAU,EAC5CC,EAAgBF,EAAI,KAAMG,GAAMA,EAAE,aAAevB,CAAS,EAChE,OAAIsB,EACFA,EAAc,OAAS,EAEvBF,EAAI,KAAK,CACP,WAAYpB,EACZ,MAAO,EACP,MAAOM,EAAiBN,CAAS,CAAA,CAClC,EAEIoB,CACT,EAAG,CAAE,GACLN,EAAeK,CAAgB,CACjC,CACC,EAAA,CAACV,EAAWJ,EAAiBC,CAAgB,CAAC,EAG/CH,EAAA,IAACqB,EAAA,CACC,MAAM,eACN,MAAM,UACN,WAAOC,EAAW,EAAA,EAClB,eAAgB,GAChB,gBAAgB,YAChB,aAAAT,EAEC,SACCL,EAAAR,EAAAA,IAACuB,EAAyB,CAAA,CAAA,EAGxBxB,EAAA,KAAAyB,WAAA,CAAA,SAAA,CAAAxB,EAAA,IAACyB,EAAA,CACC,YAAanB,GAAA,YAAAA,EAAW,aACxB,aAAcoB,EAAqBpB,GAAA,YAAAA,EAAW,WAAW,EACzD,eAAgBoB,EAAqBpB,GAAA,YAAAA,EAAW,aAAa,EAC7D,WAAW,4BAAA,CACb,EACAN,EAAAA,IAAC,OAAI,UAAU,mDACZ,WAAY,IAAI,CAACkB,EAAOS,IACvB3B,EAAA,IAACL,EAAA,CAEC,MAAOuB,EAAM,MACb,UAAWA,EAAM,WACjB,MAAOA,EAAM,KAAA,EAHRS,CAKR,CAAA,EACH,CAAA,EACF,CAAA,CAAA,CAIR"}