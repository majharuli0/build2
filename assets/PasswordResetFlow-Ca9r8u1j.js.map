{"version":3,"file":"PasswordResetFlow-Ca9r8u1j.js","sources":["../../src/Pages/ForgotPassword/ForgotPassword.jsx","../../src/Pages/ForgotPassword/VerifyOTP.jsx","../../src/Pages/ForgotPassword/ResetPassword.jsx","../../src/Pages/ForgotPassword/PasswordResetFlow.jsx"],"sourcesContent":["import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport CustomButton from \"../../Shared/button/CustomButton\";\r\nimport { sendOTP } from \"../../api/login-v1\";\r\nimport toast from \"react-hot-toast\";\r\nimport CustomErrorToast from \"../../Shared/Tosat/CustomErrorToast\";\r\nimport CustomToast from \"../../Shared/Tosat/CustomToast\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ForgotPassword = ({ setStep, setEmail }) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit = async (data) => {\r\n    sendOTP({ email: data.email })\r\n      .then((res) => {\r\n        setEmail(data.email);\r\n        setStep(\"verify\");\r\n        toast.custom((t) => (\r\n          <CustomToast\r\n            t={t}\r\n            text={\"OTP sent to your email!\"}\r\n            title={\"Success!\"}\r\n          />\r\n        ));\r\n      })\r\n      .catch((err) => {\r\n        toast.custom((t) => (\r\n          <CustomErrorToast\r\n            t={t}\r\n            text={err?.response?.data?.message || err.response}\r\n            title={\"Error\"}\r\n          />\r\n        ));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[470px]\">\r\n      <h1 className=\"font-bold text-[36px] \">Forgot Password</h1>\r\n      <p className=\"text-gray-600 text-[16px] font-[400] mt-2\">\r\n        Please Enter Your Email Address To Reset Your Password.\r\n      </p>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"lg:w-[470px] pt-10\">\r\n        <div className=\"flex flex-col items-start\">\r\n          <label\r\n            htmlFor=\"email\"\r\n            className=\"mb-1 font-[500] text-[14px] text-[#1B2559]\"\r\n          >\r\n            Email <span className=\"\">*</span>\r\n          </label>\r\n          <input\r\n            className=\"py-[18px] px-[16px] h-[50px] text-[#3D4854] placeholder:text-[#A3AED0]  rounded-[16px] w-full text-[16px] outline-none  border-[1px] focus:border-primary\"\r\n            type=\"email\"\r\n            placeholder=\"mail@simmmple.com\"\r\n            id=\"email\"\r\n            {...register(\"email\", {\r\n              required: {\r\n                value: true,\r\n                message: \"Please enter a valid e-mail address\",\r\n              },\r\n            })}\r\n          />\r\n          {errors.email && (\r\n            <span className=\"text-sm mt-1 text-red-500\">\r\n              {errors.email.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        <CustomButton\r\n          className=\"w-full h-[50px] font-[700] text-[14px] rounded-[18px] mt-6\"\r\n          type=\"submit\"\r\n        >\r\n          Send OTP\r\n        </CustomButton>\r\n        {/* Back to login */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => navigate(\"/\")}\r\n          className=\"text-primary text-base mt-4 hover:text-primary/80 transition w-full mx-auto\"\r\n        >\r\n          ← Back to Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ForgotPassword;\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport CustomButton from \"../../Shared/button/CustomButton\";\r\nimport toast from \"react-hot-toast\";\r\nimport CustomToast from \"../../Shared/Tosat/CustomToast\";\r\nimport CustomErrorToast from \"../../Shared/Tosat/CustomErrorToast\";\r\nimport { verifyOTP } from \"../../api/login-v1\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst VerifyOTP = ({ setStep, email, setIsOtpVerified }) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit = async (data) => {\r\n    verifyOTP({ email, otp: data.otp })\r\n      .then((res) => {\r\n        setIsOtpVerified(true);\r\n        setStep(\"reset\");\r\n        toast.custom((t) => (\r\n          <CustomToast\r\n            t={t}\r\n            text={\"OTP verified successfully!\"}\r\n            title={\"Success!\"}\r\n          />\r\n        ));\r\n      })\r\n      .catch((err) => {\r\n        toast.custom((t) => (\r\n          <CustomErrorToast\r\n            t={t}\r\n            text={err?.response?.data?.message || err.response}\r\n            title={\"Error\"}\r\n          />\r\n        ));\r\n      });\r\n    // try {\r\n    //   const response = await fetch(\"/api/v1/auth/verify-otp\", {\r\n    //     method: \"POST\",\r\n    //     headers: { \"Content-Type\": \"application/json\" },\r\n    //     body: JSON.stringify({ email, otp: data.otp }),\r\n    //   });\r\n\r\n    //   if (response.ok) {\r\n    //     setIsOtpVerified(true);\r\n    //     setStep(\"reset\");\r\n    //     alert(\"OTP verified successfully!\");\r\n    //   } else {\r\n    //     throw new Error(\"Invalid OTP\");\r\n    //   }\r\n    // } catch (error) {\r\n    //   alert(error.message);\r\n    // }\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[470px]\">\r\n      <h1 className=\"font-bold text-[36px]\">Verify OTP</h1>\r\n      <p className=\"text-gray-600 text-[16px] font-[400] mt-2\">\r\n        Enter the OTP sent to <span className=\"font-semibold\"> {email}</span>\r\n      </p>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"lg:w-[470px] pt-10\">\r\n        <div className=\"flex flex-col items-start\">\r\n          <label\r\n            htmlFor=\"otp\"\r\n            className=\"mb-1 font-[500] text-[14px] text-[#1B2559]\"\r\n          >\r\n            OTP <span className=\"text-blue-600\">*</span>\r\n          </label>\r\n          <input\r\n            className=\"py-[18px] px-[16px] h-[50px] text-[#3D4854] placeholder:text-[#A3AED0]  rounded-[16px] w-full text-[16px] outline-none  border-[1px] focus:border-primary\"\r\n            type=\"text\"\r\n            placeholder=\"Enter OTP\"\r\n            id=\"otp\"\r\n            {...register(\"otp\", {\r\n              required: {\r\n                value: true,\r\n                message: \"Please enter the OTP\",\r\n              },\r\n              pattern: {\r\n                value: /^\\d{6}$/,\r\n                message: \"OTP must be 6 digits\",\r\n              },\r\n            })}\r\n          />\r\n          {errors.otp && (\r\n            <span className=\"text-sm mt-1 text-red-500\">\r\n              {errors.otp.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        <CustomButton\r\n          className=\"w-full h-[50px] font-[700] text-[14px] rounded-[18px] mt-6\"\r\n          type=\"submit\"\r\n        >\r\n          Verify OTP\r\n        </CustomButton>\r\n        {/* Back to login */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => navigate(\"/\")}\r\n          className=\"text-primary text-base mt-4 hover:text-primary/80 transition w-full mx-auto\"\r\n        >\r\n          ← Back to Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VerifyOTP;\r\n","import React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport CustomButton from \"../../Shared/button/CustomButton\";\r\nimport toast from \"react-hot-toast\";\r\nimport CustomToast from \"../../Shared/Tosat/CustomToast\";\r\nimport CustomErrorToast from \"../../Shared/Tosat/CustomErrorToast\";\r\nimport { resetPassword } from \"../../api/login-v1\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst ResetPassword = ({ setStep, email, setIsOtpVerified }) => {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    watch,\r\n    formState: { errors },\r\n  } = useForm();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const password = watch(\"password\");\r\n  const navigate = useNavigate();\r\n\r\n  const onSubmit = async (data) => {\r\n    resetPassword({ email, password: data.password })\r\n      .then((res) => {\r\n        setIsOtpVerified(true);\r\n        setStep(\"reset\");\r\n        toast.custom((t) => (\r\n          <CustomToast\r\n            t={t}\r\n            text={\"Password reset successfully!\"}\r\n            title={\"Success!\"}\r\n          />\r\n        ));\r\n        navigate(\"/\");\r\n      })\r\n      .catch((err) => {\r\n        toast.custom((t) => (\r\n          <CustomErrorToast\r\n            t={t}\r\n            text={err?.response?.data?.message || err.response}\r\n            title={\"Error\"}\r\n          />\r\n        ));\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div className=\"w-[470px]\">\r\n      <h1 className=\"font-bold text-[36px] \">Reset Password</h1>\r\n      <p className=\"text-gray-600 text-[16px] font-[400] mt-2\">\r\n        Enter your new password\r\n      </p>\r\n\r\n      <form onSubmit={handleSubmit(onSubmit)} className=\"lg:w-[470px] pt-10\">\r\n        <div className=\"flex flex-col items-start mb-5\">\r\n          <label\r\n            htmlFor=\"password\"\r\n            className=\"mb-1 font-[500] text-[14px] text-[#1B2559]\"\r\n          >\r\n            Password <span className=\"text-blue-600\">*</span>\r\n          </label>\r\n          <div className=\"w-full relative\">\r\n            <input\r\n              className=\"py-[18px] px-[16px] h-[50px] text-[#3D4854] placeholder:text-[#A3AED0]  rounded-[16px] w-full text-[16px] outline-none  border-[1px] focus:border-primary\"\r\n              type={showPassword ? \"text\" : \"password\"}\r\n              placeholder=\"Enter new password\"\r\n              id=\"password\"\r\n              {...register(\"password\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"Please enter a password\",\r\n                },\r\n                minLength: {\r\n                  value: 8,\r\n                  message: \"Password must be at least 8 characters\",\r\n                },\r\n              })}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className=\"absolute top-[27%] right-[10px]\"\r\n              onClick={() => setShowPassword(!showPassword)}\r\n            >\r\n              {showPassword ? (\r\n                <svg\r\n                  className=\"text-[25px] text-black\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M12 6a9.77 9.77 0 0 1 8.82 5.5C19.17 14.87 15.79 17 12 17s-7.17-2.13-8.82-5.5A9.77 9.77 0 0 1 12 6m0-2C7 4 2.73 7.11 1 11.5C2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4m0 5a2.5 2.5 0 0 1 0 5a2.5 2.5 0 0 1 0-5m0-2c-2.48 0-4.5 2.02-4.5 4.5S9.52 16 12 16s4.5-2.02 4.5-4.5S14.48 7 12 7\"\r\n                  />\r\n                </svg>\r\n              ) : (\r\n                <svg\r\n                  className=\"text-[25px] text-black\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-3.08-3.08c-1.15.38-2.37.58-3.65.58c-5 0-9.27-3.11-11-7.5c.69-1.76 1.79-3.31 3.19-4.54zM12 9a3 3 0 0 1 3 3a3 3 0 0 1-.17 1L11 9.17A3 3 0 0 1 12 9m0-4.5c5 0 9.27 3.11 11 7.5a11.79 11.79 0 0 1-4 5.19l-1.42-1.43A9.862 9.862 0 0 0 20.82 12A9.821 9.821 0 0 0 12 6.5c-1.09 0-2.16.18-3.16.5L7.3 5.47c1.44-.62 3.03-.97 4.7-.97M3.18 12A9.821 9.821 0 0 0 12 17.5c.69 0 1.37-.07 2-.21L11.72 15A3.064 3.064 0 0 1 9 12.28L5.6 8.87c-.99.85-1.82 1.91-2.42 3.13\"\r\n                  />\r\n                </svg>\r\n              )}\r\n            </button>\r\n          </div>\r\n          {errors.password && (\r\n            <span className=\"text-sm mt-1 text-red-500\">\r\n              {errors.password.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex flex-col items-start\">\r\n          <label\r\n            htmlFor=\"confirmPassword\"\r\n            className=\"mb-1 font-[500] text-[14px] text-[#1B2559]\"\r\n          >\r\n            Confirm Password <span className=\"text-blue-600\">*</span>\r\n          </label>\r\n          <div className=\"w-full relative\">\r\n            <input\r\n              className=\"py-[18px] px-[16px] h-[50px] text-[#3D4854] placeholder:text-[#A3AED0]  rounded-[16px] w-full text-[16px] outline-none  border-[1px] focus:border-primary\"\r\n              type={showConfirmPassword ? \"text\" : \"password\"}\r\n              placeholder=\"Confirm new password\"\r\n              id=\"confirmPassword\"\r\n              {...register(\"confirmPassword\", {\r\n                required: {\r\n                  value: true,\r\n                  message: \"Please confirm your password\",\r\n                },\r\n                validate: (value) =>\r\n                  value === password || \"Passwords do not match\",\r\n              })}\r\n            />\r\n            <button\r\n              type=\"button\"\r\n              className=\"absolute top-[27%] right-[10px]\"\r\n              onClick={() => setShowConfirmPassword(!showConfirmPassword)}\r\n            >\r\n              {showConfirmPassword ? (\r\n                <svg\r\n                  className=\"text-[25px] text-black\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M12 6a9.77 9.77 0 0 1 8.82 5.5C19.17 14.87 15.79 17 12 17s-7.17-2.13-8.82-5.5A9.77 9.77 0 0 1 12 6m0-2C7 4 2.73 7.11 1 11.5C2.73 15.89 7 19 12 19s9.27-3.11 11-7.5C21.27 7.11 17 4 12 4m0 5a2.5 2.5 0 0 1 0 5a2.5 2.5 0 0 1 0-5m0-2c-2.48 0-4.5 2.02-4.5 4.5S9.52 16 12 16s4.5-2.02 4.5-4.5S14.48 7 12 7\"\r\n                  />\r\n                </svg>\r\n              ) : (\r\n                <svg\r\n                  className=\"text-[25px] text-black\"\r\n                  xmlns=\"http://www.w3.org/2000/svg\"\r\n                  viewBox=\"0 0 24 24\"\r\n                >\r\n                  <path\r\n                    fill=\"currentColor\"\r\n                    d=\"M2 5.27L3.28 4L20 20.72L18.73 22l-3.08-3.08c-1.15.38-2.37.58-3.65.58c-5 0-9.27-3.11-11-7.5c.69-1.76 1.79-3.31 3.19-4.54zM12 9a3 3 0 0 1 3 3a3 3 0 0 1-.17 1L11 9.17A3 3 0 0 1 12 9m0-4.5c5 0 9.27 3.11 11 7.5a11.79 11.79 0 0 1-4 5.19l-1.42-1.43A9.862 9.862 0 0 0 20.82 12A9.821 9.821 0 0 0 12 6.5c-1.09 0-2.16.18-3.16.5L7.3 5.47c1.44-.62 3.03-.97 4.7-.97M3.18 12A9.821 9.821 0 0 0 12 17.5c.69 0 1.37-.07 2-.21L11.72 15A3.064 3.064 0 0 1 9 12.28L5.6 8.87c-.99.85-1.82 1.91-2.42 3.13\"\r\n                  />\r\n                </svg>\r\n              )}\r\n            </button>\r\n          </div>\r\n          {errors.confirmPassword && (\r\n            <span className=\"text-sm mt-1 text-red-500\">\r\n              {errors.confirmPassword.message}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        <CustomButton\r\n          className=\"w-full h-[50px] font-[700] text-[14px] rounded-[18px] mt-6\"\r\n          type=\"submit\"\r\n        >\r\n          Reset Password\r\n        </CustomButton>\r\n        {/* Back to login */}\r\n        <button\r\n          type=\"button\"\r\n          onClick={() => navigate(\"/\")}\r\n          className=\"text-primary text-base mt-4 hover:text-primary/80 transition w-full mx-auto\"\r\n        >\r\n          ← Back to Login\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ResetPassword;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport ForgotPassword from \"./ForgotPassword\";\r\nimport VerifyOTP from \"./VerifyOTP\";\r\nimport ResetPassword from \"./ResetPassword\";\r\nimport loginImage from \"@/assets/login_image.svg\";\r\nimport roleLogo from \"@/assets/roleLogo.svg\";\r\n\r\nconst PasswordResetFlow = () => {\r\n  const [step, setStep] = useState(\"forgot\"); // 'forgot', 'verify', 'reset'\r\n  const [email, setEmail] = useState(\"\");\r\n  const [isOtpVerified, setIsOtpVerified] = useState(false);\r\n\r\n  // Prevent direct access to reset password page\r\n  useEffect(() => {\r\n    if (step === \"reset\" && !isOtpVerified) {\r\n      setStep(\"forgot\");\r\n    }\r\n  }, [step, isOtpVerified]);\r\n\r\n  return (\r\n    <div className=\"md:flex w-full items-center justify-between gap-6 overflow-hidden\">\r\n      <div className=\"flex items-center h-[100vh] md:w-[50%] w-full justify-center\">\r\n        <div className=\"lg:w-[700px] h-full flex items-center justify-center px-5\">\r\n          {step === \"forgot\" && (\r\n            <ForgotPassword setStep={setStep} setEmail={setEmail} />\r\n          )}\r\n          {step === \"verify\" && (\r\n            <VerifyOTP\r\n              setStep={setStep}\r\n              email={email}\r\n              setIsOtpVerified={setIsOtpVerified}\r\n            />\r\n          )}\r\n          {step === \"reset\" && isOtpVerified && (\r\n            <ResetPassword\r\n              setStep={setStep}\r\n              email={email}\r\n              setIsOtpVerified={setIsOtpVerified}\r\n            />\r\n          )}\r\n        </div>\r\n      </div>\r\n      <div className=\"hidden relative md:h-[100vh] w-full h-full md:w-[50%] md:flex justify-end\">\r\n        <img\r\n          className=\"h-full w-full object-cover\"\r\n          src={loginImage}\r\n          alt=\"login background\"\r\n        />\r\n        <div className=\"absolute top-[50%] left-[50%] flex items-center flex-col justify-center translate-x-[-50%] translate-y-[-50%]\">\r\n          <img src={roleLogo} alt=\"role logo\" className=\"w-[363px]\" />\r\n          <p className=\"font-[500] text-[18px] text-white/80 text-center pt-[15px] w-[500px]\">\r\n            Caring Connections, Empowering Lives: Nurturing Well-being Through\r\n            Every Click.\r\n          </p>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PasswordResetFlow;\r\n"],"names":["ForgotPassword","setStep","setEmail","register","handleSubmit","errors","useForm","navigate","useNavigate","onSubmit","data","sendOTP","res","toast","t","jsx","CustomToast","err","CustomErrorToast","_b","_a","jsxs","CustomButton","VerifyOTP","email","setIsOtpVerified","verifyOTP","ResetPassword","watch","showPassword","setShowPassword","useState","showConfirmPassword","setShowConfirmPassword","password","resetPassword","value","PasswordResetFlow","step","isOtpVerified","useEffect","loginImage","roleLogo"],"mappings":"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"}