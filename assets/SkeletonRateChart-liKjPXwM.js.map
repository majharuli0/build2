{"version":3,"file":"SkeletonRateChart-liKjPXwM.js","sources":["../../src/Components/GraphAndChart/RateChart.jsx","../../src/Components/Skeleton/SkeletonRateChart.jsx"],"sourcesContent":["import React, { useEffect, useMemo, useState } from \"react\";\r\nimport ReactEcharts from \"echarts-for-react\";\r\nimport { Empty } from \"antd\";\r\nfunction dayOfWeekFromDayNumber(dayNumber) {\r\n  const daysOfWeek = [\r\n    \"Monday\",\r\n    \"Tuesday\",\r\n    \"Wednesday\",\r\n    \"Thursday\",\r\n    \"Friday\",\r\n    \"Saturday\",\r\n    \"Sunday\",\r\n  ];\r\n  return daysOfWeek[dayNumber];\r\n}\r\n\r\nconst RateChart = ({ dateType, cheartInfo = {}, color, fromDate, toDate }) => {\r\n  const [isMounted, setIsMounted] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Set the mounted state to true once the component is mounted\r\n    setIsMounted(true);\r\n  }, []);\r\n  const option = useMemo(() => {\r\n    try {\r\n      const { xdata, maxArray, minArray, allAvgNumber } = cheartInfo;\r\n\r\n      // Generate all dates in the range\r\n      const dates = [];\r\n      const start = new Date(fromDate);\r\n      const end = new Date(toDate);\r\n\r\n      // Create a map of existing data\r\n      const dataMap = new Map();\r\n      xdata.forEach((date, index) => {\r\n        const dateStr = new Date(date).toISOString().split(\"T\")[0];\r\n        dataMap.set(dateStr, {\r\n          min: minArray[index],\r\n          max: maxArray[index],\r\n        });\r\n      });\r\n\r\n      // Generate all dates and their data\r\n      const allData = [];\r\n      for (let d = new Date(start); d <= end; d.setDate(d.getDate() + 1)) {\r\n        const dateStr = d.toISOString().split(\"T\")[0];\r\n        const existingData = dataMap.get(dateStr);\r\n\r\n        if (dateType === \"Month\") {\r\n          const month = d.getMonth() + 1;\r\n          const day = d.getDate();\r\n          dates.push(\r\n            `${month < 10 ? \"0\" + month : month}-${day < 10 ? \"0\" + day : day}`\r\n          );\r\n        } else {\r\n          dates.push(\r\n            dayOfWeekFromDayNumber(d.getDay() === 0 ? 6 : d.getDay() - 1)\r\n          );\r\n        }\r\n\r\n        allData.push({\r\n          min: existingData ? existingData.min : null,\r\n          max: existingData ? existingData.max : null,\r\n        });\r\n      }\r\n\r\n      // Find min/max values and their positions from valid data only\r\n      const validData = allData.filter((d) => d.min !== null && d.max !== null);\r\n      const minValue = Math.min(...validData.map((d) => d.min));\r\n      const maxValue = Math.max(...validData.map((d) => d.max));\r\n\r\n      // Find the positions of min and max values\r\n      const minPosition = allData.findIndex((item) => item.min === minValue);\r\n      const maxPosition = allData.findIndex((item) => item.max === maxValue);\r\n\r\n      return {\r\n        backgroundColor: \"#fff\",\r\n        grid: {\r\n          left: \"2%\",\r\n          right: \"7%\",\r\n          bottom: \"4%\",\r\n          top: \"20%\",\r\n          containLabel: true,\r\n        },\r\n        tooltip: {\r\n          trigger: \"axis\",\r\n          formatter: function (params) {\r\n            const date = params[0].axisValue;\r\n            const minVal = params[0].value[1];\r\n            const maxVal = params[0].value[2];\r\n            return `<span style=\"font-weight: bold;\">Date: ${date}</span><br/><span >Max: ${\r\n              maxVal || \"-\"\r\n            }</span><br/><span >Min: ${\r\n              minVal || (minVal >= 0 && minVal !== null) ? minVal : \"-\"\r\n            }</span>`;\r\n          },\r\n        },\r\n        xAxis: {\r\n          type: \"category\",\r\n          splitLine: { show: false },\r\n          axisTick: { show: false },\r\n          axisLine: {\r\n            lineStyle: {\r\n              color: \"#ccc\",\r\n            },\r\n          },\r\n          axisLabel: {\r\n            color: \"#666\",\r\n          },\r\n          data: dates,\r\n        },\r\n        yAxis: {\r\n          type: \"value\",\r\n          name: \"BPM\",\r\n          nameLocation: \"end\",\r\n          axisLine: { show: false },\r\n          axisLabel: {\r\n            color: \"#666\",\r\n          },\r\n          splitLine: {\r\n            lineStyle: {\r\n              color: \"#eee\",\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            name: \"Range\",\r\n            type: \"custom\",\r\n            renderItem: (params, api) => {\r\n              const start = api.coord([api.value(0), api.value(1)]);\r\n              const end = api.coord([api.value(0), api.value(2)]);\r\n              const height = end[1] - start[1];\r\n\r\n              return {\r\n                type: \"rect\",\r\n                shape: {\r\n                  x: start[0] - 10,\r\n                  y: start[1],\r\n                  width: 20,\r\n                  height: height,\r\n                  r: 10,\r\n                },\r\n                style: {\r\n                  fill: color, // Adjust the color as needed\r\n                  //   stroke: \"#2980b9\",\r\n                  lineWidth: 1,\r\n                },\r\n              };\r\n            },\r\n            encode: {\r\n              x: 0,\r\n              y: [1, 2], // Encode for the range (min, max)\r\n            },\r\n            data: allData.map((item, i) => [i, item.min, item.max]),\r\n          },\r\n          {\r\n            name: \"Average\",\r\n            type: \"line\",\r\n            symbol: \"none\",\r\n            lineStyle: {\r\n              type: \"dashed\",\r\n              width: 1,\r\n            },\r\n            markLine: {\r\n              silent: true,\r\n              symbol: \"none\",\r\n              data: [\r\n                {\r\n                  yAxis: allAvgNumber,\r\n                  label: {\r\n                    show: true,\r\n                    formatter: `Avg: ${allAvgNumber}`,\r\n                    position: \"end\",\r\n                    color: color,\r\n                  },\r\n                  lineStyle: {\r\n                    color: color,\r\n                    width: 1,\r\n                  },\r\n                },\r\n              ],\r\n            },\r\n          },\r\n          {\r\n            name: \"Minimum\",\r\n            type: \"pictorialBar\",\r\n            symbolSize: [15, 15],\r\n            symbolOffset: [0, -19],\r\n            symbolPosition: \"end\",\r\n            z: 12,\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                offset: [1, 60],\r\n                position: \"top\",\r\n                fontSize: 13,\r\n                fontWeight: 400,\r\n                color: color,\r\n                lineHeight: 15,\r\n                formatter: function (params) {\r\n                  return `Min\\n${minValue}`;\r\n                },\r\n              },\r\n            },\r\n            itemStyle: {\r\n              borderColor: color,\r\n              borderWidth: 2,\r\n              borderType: \"solid\",\r\n            },\r\n            color: \"#fff\",\r\n            data: new Array(allData.length).fill(null).map((_, index) => ({\r\n              value: index === minPosition ? minValue : \"-\",\r\n              symbolSize: [15, 15],\r\n              symbol: index === minPosition ? \"circle\" : \"none\",\r\n            })),\r\n          },\r\n          {\r\n            name: \"Maximum\",\r\n            type: \"pictorialBar\",\r\n            symbolSize: [15, 15],\r\n            symbolOffset: [0, 2],\r\n            symbolPosition: \"end\",\r\n            z: 12,\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                offset: [1, 2],\r\n                position: \"top\",\r\n                fontSize: 13,\r\n                fontWeight: 400,\r\n                color: color,\r\n                lineHeight: 15,\r\n                formatter: function (params) {\r\n                  return `Max\\n${maxValue}`;\r\n                },\r\n              },\r\n            },\r\n            itemStyle: {\r\n              borderColor: color,\r\n              borderWidth: 2,\r\n              borderType: \"solid\",\r\n            },\r\n            color: \"#fff\",\r\n            data: new Array(allData.length).fill(null).map((_, index) => ({\r\n              value: index === maxPosition ? maxValue : \"-\",\r\n              symbolSize: [15, 15],\r\n              symbol: index === maxPosition ? \"circle\" : \"none\",\r\n            })),\r\n          },\r\n        ],\r\n        legend: {\r\n          data: [\"Average\", \"Minimum\", \"Maximum\"],\r\n          textStyle: {\r\n            color: \"#666\",\r\n          },\r\n        },\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        backgroundColor: \"#fff\",\r\n        title: {\r\n          text: \"No data available\",\r\n          show: true,\r\n          left: \"center\",\r\n          top: \"center\",\r\n          textStyle: {\r\n            color: \"#000\",\r\n            fontSize: \"20px\",\r\n            fontWeight: 400,\r\n          },\r\n        },\r\n      };\r\n    }\r\n  }, [cheartInfo, dateType, isMounted, fromDate, toDate, color]);\r\n  if (!cheartInfo?.xdata?.length) {\r\n    return <Empty description=\"No data available to show\" />;\r\n  }\r\n  return (\r\n    <ReactEcharts\r\n      option={option}\r\n      notMerge={true}\r\n      style={{\r\n        height: \"300px\",\r\n        width: \"100%\",\r\n        transition: \"all 0.3s ease\",\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default RateChart;\r\n","import React from \"react\";\r\nimport { Skeleton } from \"antd\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SkeletonRateChart = ({\r\n  height = 300,\r\n  chartHeight = 250,\r\n  barCount = 7,\r\n  barWidth = 40,\r\n  gridLines = 5,\r\n}) => {\r\n  return (\r\n    <div\r\n      className=\"w-full flex flex-col p-4 skeleton-wrapper\"\r\n      style={{ height }}\r\n    >\r\n      <div\r\n        className=\"relative w-full border border-gray-200 rounded-md\"\r\n        style={{ height: chartHeight }}\r\n      >\r\n        <div className=\"w-full h-full flex flex-col justify-between\">\r\n          {[...Array(gridLines)].map((_, i) => (\r\n            <div key={i} className=\"w-full h-px bg-gray-100\" />\r\n          ))}\r\n        </div>\r\n        <div className=\"absolute bottom-0 left-0 right-0 top-0 flex justify-between p-4\">\r\n          {[...Array(barCount)].map((_, index) => (\r\n            <div\r\n              key={index}\r\n              className=\"flex flex-col items-center justify-end skeleton-bar-group\"\r\n              style={{ width: `${100 / barCount}%` }}\r\n            >\r\n              <div\r\n                className=\"relative w-full flex flex-col items-center\"\r\n                style={{ width: barWidth }}\r\n              >\r\n                <Skeleton.Node\r\n                  active\r\n                  style={{\r\n                    width: 10,\r\n                    height: 100,\r\n                    position: \"absolute\",\r\n                    bottom: `${Math.random() * 50 + 10}%`,\r\n                    backgroundColor: \"#f0f0f0\",\r\n                  }}\r\n                />\r\n                <Skeleton.Node\r\n                  active\r\n                  style={{\r\n                    width: 6,\r\n                    height: `${Math.random() * 40 + 30}%`,\r\n                    borderRadius: \"2px\",\r\n                    position: \"absolute\",\r\n                    bottom: \"10%\",\r\n                    backgroundColor: \"#f0f0f0\",\r\n                  }}\r\n                />\r\n                <Skeleton.Node\r\n                  active\r\n                  style={{\r\n                    width: 10,\r\n                    height: 10,\r\n                    borderRadius: \"50%\",\r\n                    position: \"absolute\",\r\n                    bottom: `${Math.random() * 40 + 50}%`,\r\n                    backgroundColor: \"#f0f0f0\",\r\n                  }}\r\n                />\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nSkeletonRateChart.propTypes = {\r\n  height: PropTypes.number,\r\n  chartHeight: PropTypes.number,\r\n  barCount: PropTypes.number,\r\n  barWidth: PropTypes.number,\r\n  gridLines: PropTypes.number,\r\n};\r\n\r\nexport default SkeletonRateChart;\r\n"],"names":["dayOfWeekFromDayNumber","dayNumber","RateChart","dateType","cheartInfo","color","fromDate","toDate","isMounted","setIsMounted","useState","useEffect","option","useMemo","xdata","maxArray","minArray","allAvgNumber","dates","start","end","dataMap","date","index","dateStr","allData","d","existingData","month","day","validData","minValue","maxValue","minPosition","item","maxPosition","params","minVal","maxVal","api","height","i","_","_a","jsx","ReactEcharts","Empty","SkeletonRateChart","chartHeight","barCount","barWidth","gridLines","jsxs","Skeleton","PropTypes"],"mappings":"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"}