{"version":3,"file":"DayRateChart-DznopYXZ.js","sources":["../../src/Components/GraphAndChart/DayRateChart.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactECharts from \"echarts-for-react\";\r\nimport { FaHeartbeat } from \"react-icons/fa\";\r\nimport { FaLungs } from \"react-icons/fa6\";\r\nimport { Empty } from \"antd\";\r\nexport default function LiveRateChart({ data, color, type, timestamp }) {\r\n  // Define safe range\r\n  const safeMin = type === \"heartRate\" ? 80 : 8;\r\n  const safeMax = type === \"heartRate\" ? 45 : 24;\r\n\r\n  // Map data with corresponding timestamps\r\n  const filteredData = data?.map((value, index) => {\r\n    const time = timestamp[index];\r\n    // Extract hours and minutes from timestamp\r\n    const [hours, minutes] = time.split(\":\");\r\n    const formattedTime = `${hours}:${minutes}`;\r\n\r\n    const intValue = value === \"-1\" ? null : parseInt(value, 10);\r\n    return {\r\n      value: intValue,\r\n      time: formattedTime,\r\n      isDanger: intValue !== null && (intValue < safeMin || intValue > safeMax),\r\n    };\r\n  });\r\n\r\n  if (data.length === 0) {\r\n    return <Empty description=\"No data available to show\" />;\r\n  }\r\n  const option = {\r\n    tooltip: {\r\n      trigger: \"axis\",\r\n      axisPointer: {\r\n        type: \"line\",\r\n      },\r\n      formatter: function (params) {\r\n        const dataIndex = params[0].dataIndex;\r\n        const { value, time } = filteredData[dataIndex];\r\n        return `\r\n         <span style=\"font-size: 12px;\">Time: ${time}</span><br/>\r\n         <span style=\"font-size: 16px;\">${\r\n           type === \"heartRate\" ? \"Heart Rate\" : \"Breath Rate\"\r\n         }: ${value !== null ? value : \"No Data\"}</span>`;\r\n      },\r\n      textStyle: {\r\n        color: \"#fff\",\r\n        fontSize: 12,\r\n      },\r\n      backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n      borderWidth: 0,\r\n    },\r\n    grid: {\r\n      left: \"5%\",\r\n      right: \"3%\",\r\n      bottom: \"10%\",\r\n      top: \"4%\",\r\n    },\r\n    xAxis: {\r\n      type: \"category\",\r\n      boundaryGap: false,\r\n      data: filteredData.map((item) => item.time),\r\n      axisLine: { show: true },\r\n      axisTick: { show: true },\r\n      axisLabel: {\r\n        show: true,\r\n        interval: function (index, value) {\r\n          // Show label if:\r\n          // 1. It's the first timestamp\r\n          // 2. It's the last timestamp\r\n          // 3. It's roughly one of 5 evenly spaced points\r\n          const interval = Math.floor(filteredData.length / 4); // Divide by 4 to get 5 points\r\n          return (\r\n            index === 0 ||\r\n            index === filteredData.length - 1 ||\r\n            index % interval === 0\r\n          );\r\n        },\r\n        formatter: function (value, index) {\r\n          const time = timestamp[index];\r\n          if (!time) return \"\";\r\n          const [hours, minutes] = time.split(\":\");\r\n          return `${hours}:${minutes}`;\r\n        },\r\n      },\r\n    },\r\n    yAxis: {\r\n      type: \"value\",\r\n      axisLine: { show: false },\r\n      axisTick: { show: false },\r\n      axisLabel: {\r\n        show: true,\r\n        formatter: function (value) {\r\n          return value; // Ensure the value format is correct\r\n        },\r\n      },\r\n      splitLine: { show: false },\r\n    },\r\n    series: [\r\n      {\r\n        name: type === \"heartRate\" ? \"Heart Rate\" : \"Breath Rate\",\r\n        data: filteredData.map((item) => item.value),\r\n        type: \"line\",\r\n        smooth: false,\r\n        lineStyle: {\r\n          width: 2,\r\n          color: color,\r\n        },\r\n        itemStyle: {\r\n          color: function (params) {\r\n            return filteredData[params.dataIndex].isDanger ? \"red\" : color;\r\n          },\r\n          opacity: 0,\r\n          emphasis: {\r\n            opacity: 1,\r\n          },\r\n        },\r\n        areaStyle: {\r\n          color: {\r\n            type: \"linear\",\r\n            x: 0,\r\n            y: 0,\r\n            x2: 0,\r\n            y2: 1,\r\n            colorStops: [\r\n              { offset: 0, color: `${color}80` },\r\n              { offset: 1, color: `${color}00` },\r\n            ],\r\n          },\r\n        },\r\n        markLine: {\r\n          symbol: [\"none\", \"none\"],\r\n          data: [\r\n            {\r\n              name: \"Safe Min\",\r\n              yAxis: safeMin,\r\n              lineStyle: {\r\n                type: \"dashed\",\r\n                color: \"gray\",\r\n              },\r\n              label: {\r\n                formatter: \"\",\r\n                position: \"end\",\r\n              },\r\n            },\r\n            {\r\n              name: \"Safe Max\",\r\n              yAxis: safeMax,\r\n              lineStyle: {\r\n                type: \"dashed\",\r\n                color: \"gray\",\r\n              },\r\n              label: {\r\n                formatter: \"\",\r\n                position: \"end\",\r\n              },\r\n            },\r\n          ],\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  return (\r\n    <div className=\"flex flex-col gap-2\">\r\n      <ReactECharts option={option} style={{ height: \"180px\" }} />\r\n    </div>\r\n  );\r\n}\r\n"],"names":["LiveRateChart","data","color","type","timestamp","safeMin","safeMax","filteredData","value","index","time","hours","minutes","formattedTime","intValue","jsx","Empty","option","params","dataIndex","item","interval","ReactECharts"],"mappings":"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"}