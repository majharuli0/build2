{"version":3,"file":"DurationDistribution-kVObX4T-.js","sources":["../../src/Pages/Elderlies/Components/TabContents/Sleep/Components/DurationDistribution.jsx"],"sourcesContent":["import { useState, useEffect, useContext, useCallback } from \"react\";\nimport { getSleepDurationDistribution } from \"@/api/deviceReports\";\nimport ls from \"store2\";\nimport dayjs from \"dayjs\";\nimport { durationData } from \"./mockData\";\nimport BarChart from \"@/Components/GraphAndChart/barChart\";\nimport Template from \"@/Components/GraphAndChartTemp/Template\";\nimport { getTemplateData } from \"@/Pages/Elderlies/Components/Utiles/utiles\";\nimport { CustomContext } from \"@/Context/UseCustomContext\";\nexport default function DurationDistribution({ isSummaryBtn = true }) {\n  const { title, color, icon, dataAnalysis, summaryProps } = getTemplateData(\n    \"Duration Distribution\"\n  );\n  const context = useContext(CustomContext);\n  const {\n    chartToDate = \"\",\n    chartFromDate = \"\",\n    elderlyDetails,\n  } = context || {};\n  const [toDate, setToDate] = useState(\n    dayjs().subtract(1, \"day\").format(\"YYYY-MM-DD\")\n  );\n  const [fromDate, setFromDate] = useState(\n    dayjs().subtract(31, \"day\").format(\"YYYY-MM-DD\")\n  );\n  const [sleepDurationDistributionData, setSleepDurationDistributionData] =\n    useState([]);\n  const getSleepDurationDistributionData = useCallback(() => {\n    getSleepDurationDistribution({\n      uids: elderlyDetails?.bedRoomIds,\n      elderly_id: elderlyDetails._id,\n\n      to_date: fromDate,\n      from_date: toDate,\n    })\n      .then((res) => {\n        filteredData(res?.data);\n        // const result = generateSleepDistribution(res?.data);\n        setSleepDurationDistributionData(res?.data);\n        // console.log(\"===============asdasd>\", result);\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }, [toDate, elderlyDetails]);\n  useEffect(() => {\n    getSleepDurationDistributionData();\n  }, [getSleepDurationDistributionData]);\n  useEffect(() => {\n    if (chartToDate && chartFromDate) {\n      setToDate(chartToDate);\n      setFromDate(chartFromDate);\n    }\n  }, [chartToDate]);\n\n  function filteredData(data) {\n    // Initialize an array to hold counts for each hour (1-12)\n    const sleepCounts = Array(12).fill(0);\n\n    // Count occurrences of each sleep duration (rounded to nearest hour)\n    data?.forEach((item) => {\n      const sleepHours = Math.round(item.sleepDuration); // Round to nearest hour\n      if (sleepHours >= 1 && sleepHours <= 12) {\n        sleepCounts[sleepHours - 1] += 1; // Increment the corresponding hour bucket\n      }\n    });\n\n    // Calculate total data points\n    const totalSleepEntries = data?.length || 0;\n\n    // Convert counts to percentages\n    const sleepDistribution = sleepCounts.map((count, index) => ({\n      hour: index + 1, // x-axis: Hour of sleep (1-12)\n      percentage: totalSleepEntries > 0 ? (count / totalSleepEntries) * 100 : 0, // y-axis: Percentage\n    }));\n\n    // Set the processed data to state\n    setSleepDurationDistributionData(sleepDistribution);\n    console.log(sleepDistribution);\n  }\n\n  return (\n    <Template\n      title={title}\n      color={color}\n      icon={icon}\n      dataAnalysis={dataAnalysis}\n      isSummaryBtn={false}\n    >\n      <BarChart\n        data={sleepDurationDistributionData}\n        dataType=\"percentage\"\n        xUnit=\"hour\"\n        chartFor=\"durationDistribution\"\n        color={color}\n        toDate={\"\"}\n        fromDate={\"\"}\n      />\n    </Template>\n  );\n}\n"],"names":["DurationDistribution","isSummaryBtn","title","color","icon","dataAnalysis","summaryProps","getTemplateData","context","useContext","CustomContext","chartToDate","chartFromDate","elderlyDetails","toDate","setToDate","useState","dayjs","fromDate","setFromDate","sleepDurationDistributionData","setSleepDurationDistributionData","getSleepDurationDistributionData","useCallback","getSleepDurationDistribution","res","filteredData","err","useEffect","data","sleepCounts","item","sleepHours","totalSleepEntries","sleepDistribution","count","index","jsx","Template","BarChart"],"mappings":"8mBASA,SAAwBA,EAAqB,CAAE,aAAAC,EAAe,IAAQ,CACpE,KAAM,CAAE,MAAAC,EAAO,MAAAC,EAAO,KAAAC,EAAM,aAAAC,EAAc,aAAAC,GAAiBC,EACzD,uBAAA,EAEIC,EAAUC,aAAWC,CAAa,EAClC,CACJ,YAAAC,EAAc,GACd,cAAAC,EAAgB,GAChB,eAAAC,CAAA,EACEL,GAAW,CAAA,EACT,CAACM,EAAQC,CAAS,EAAIC,EAAA,SAC1BC,IAAQ,SAAS,EAAG,KAAK,EAAE,OAAO,YAAY,CAAA,EAE1C,CAACC,EAAUC,CAAW,EAAIH,EAAA,SAC9BC,IAAQ,SAAS,GAAI,KAAK,EAAE,OAAO,YAAY,CAAA,EAE3C,CAACG,EAA+BC,CAAgC,EACpEL,EAAA,SAAS,CAAE,CAAA,EACPM,EAAmCC,EAAAA,YAAY,IAAM,CAC5BC,EAAA,CAC3B,KAAMX,GAAA,YAAAA,EAAgB,WACtB,WAAYA,EAAe,IAE3B,QAASK,EACT,UAAWJ,CAAA,CACZ,EACE,KAAMW,GAAQ,CACbC,EAAaD,GAAA,YAAAA,EAAK,IAAI,EAEtBJ,EAAiCI,GAAA,YAAAA,EAAK,IAAI,CAAA,CAE3C,EACA,MAAOE,GAAQ,CACd,QAAQ,IAAIA,CAAG,CAAA,CAChB,CAAA,EACF,CAACb,EAAQD,CAAc,CAAC,EAC3Be,EAAAA,UAAU,IAAM,CACmBN,GAAA,EAChC,CAACA,CAAgC,CAAC,EACrCM,EAAAA,UAAU,IAAM,CACVjB,GAAeC,IACjBG,EAAUJ,CAAW,EACrBQ,EAAYP,CAAa,EAC3B,EACC,CAACD,CAAW,CAAC,EAEhB,SAASe,EAAaG,EAAM,CAE1B,MAAMC,EAAc,MAAM,EAAE,EAAE,KAAK,CAAC,EAG9BD,GAAA,MAAAA,EAAA,QAASE,GAAS,CACtB,MAAMC,EAAa,KAAK,MAAMD,EAAK,aAAa,EAC5CC,GAAc,GAAKA,GAAc,KACvBF,EAAAE,EAAa,CAAC,GAAK,EACjC,GAII,MAAAC,GAAoBJ,GAAA,YAAAA,EAAM,SAAU,EAGpCK,EAAoBJ,EAAY,IAAI,CAACK,EAAOC,KAAW,CAC3D,KAAMA,EAAQ,EACd,WAAYH,EAAoB,EAAKE,EAAQF,EAAqB,IAAM,CACxE,EAAA,EAGFZ,EAAiCa,CAAiB,EAClD,QAAQ,IAAIA,CAAiB,CAC/B,CAGE,OAAAG,EAAA,IAACC,EAAA,CACC,MAAApC,EACA,MAAAC,EACA,KAAAC,EACA,aAAAC,EACA,aAAc,GAEd,SAAAgC,EAAA,IAACE,EAAA,CACC,KAAMnB,EACN,SAAS,aACT,MAAM,OACN,SAAS,uBACT,MAAAjB,EACA,OAAQ,GACR,SAAU,EAAA,CACZ,CAAA,CAAA,CAGN"}