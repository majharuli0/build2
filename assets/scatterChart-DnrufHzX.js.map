{"version":3,"file":"scatterChart-DnrufHzX.js","sources":["../../src/Components/GraphAndChart/scatterChart.jsx"],"sourcesContent":["import React, { useEffect } from \"react\";\nimport ReactECharts from \"echarts-for-react\";\nimport { Empty } from \"antd\";\nconst ScatterChart = ({ data = [] }) => {\n  const allTypes = {\n    \"Went to bed\": \"#1E8A8A\",\n    \"Fall asleep\": \"#7A5EBE\",\n    \"Wake up\": \"#3A81BF\",\n    \"Get up\": \"#CC8A50\",\n    \"Bed-Exit at Night\": \"#508C9B\",\n  };\n\n  const typesInData = Array.from(\n    new Set(data.flat().map((event) => event.type))\n  );\n  const dynamicTypes = Object.keys(allTypes).reduce((acc, type) => {\n    if (typesInData.includes(type)) {\n      acc[type] = allTypes[type];\n    }\n    return acc;\n  }, {});\n\n  let minHour = Infinity;\n  let maxHour = -Infinity;\n\n  const seriesData = Object.keys(dynamicTypes).map((type) => ({\n    name: type,\n    type: \"scatter\",\n    data: [],\n    itemStyle: { color: dynamicTypes[type] },\n    symbolSize: 15,\n  }));\n\n  data.forEach((day) => {\n    if (Array.isArray(day)) {\n      day.forEach((event) => {\n        const { date, time: timeStr, type, suffix = \"\" } = event; // Include suffix\n        const time = new Date(timeStr);\n        const hour = time.getHours() + time.getMinutes() / 60;\n        const dayOffset = time.getHours() >= 18 ? 0 : 1;\n\n        minHour = Math.min(minHour, hour + 24 * dayOffset);\n        maxHour = Math.max(maxHour, hour + 24 * dayOffset);\n\n        const series = seriesData.find((s) => s.name === type);\n        if (series) {\n          series.data.push([hour + 24 * dayOffset, date, timeStr, suffix]); // Add suffix\n        }\n      });\n    } else {\n      console.warn(\"Expected an array for 'day', but got:\", day);\n    }\n  });\n\n  if (data?.length === 0) {\n    return (\n      <div className=\"h-full flex flex-col items-center justify-center\">\n        <Empty description=\"No data available to show\" />\n      </div>\n    );\n  }\n\n  const option = {\n    title: {},\n    legend: {\n      show: true,\n      data: Object.keys(dynamicTypes),\n    },\n    tooltip: {\n      trigger: \"item\",\n      axisPointer: {\n        type: \"cross\",\n      },\n      formatter: (params) => {\n        const eventTime = new Date(params.data[2]);\n        const suffix = params.data[3]; // Extract the suffix\n        return `${params.seriesName}<br/>Date: ${\n          params.data[1]\n        }<br/>Time: ${suffix} ${eventTime.getHours()}:${eventTime\n          .getMinutes()\n          .toString()\n          .padStart(2, \"0\")}`;\n      },\n    },\n    xAxis: {\n      type: \"value\",\n      min: Math.floor(minHour),\n      max: Math.ceil(maxHour),\n      axisLabel: {\n        formatter: (value) => {\n          return (value >= 24 ? value - 24 : value) + \":00\";\n        },\n      },\n      splitLine: { show: false },\n    },\n    yAxis: {\n      type: \"category\",\n      name: \"Date\",\n      data: [...new Set(data?.flat()?.map((event) => event.date))],\n    },\n    series: seriesData,\n    dataZoom: [\n      {\n        type: \"slider\",\n        yAxisIndex: 0,\n        start: data.length > 15 ? 90 : 0,\n        end: 100,\n      },\n      {\n        type: \"inside\",\n        yAxisIndex: 0,\n        start: data.length > 15 ? 90 : 0,\n        end: 100,\n      },\n    ],\n    grid: {\n      top: \"15%\",\n      bottom: \"10%\",\n      left: \"7%\",\n      right: \"10%\",\n    },\n  };\n\n  return <ReactECharts option={option} />;\n};\n\nexport default ScatterChart;\n"],"names":["ScatterChart","data","allTypes","typesInData","event","dynamicTypes","acc","type","minHour","maxHour","seriesData","day","date","timeStr","suffix","time","hour","dayOffset","series","s","jsx","Empty","option","params","eventTime","value","_a","ReactECharts"],"mappings":"0XAGA,MAAMA,EAAe,CAAC,CAAE,KAAAC,EAAO,CAAA,KAAS,OACtC,MAAMC,EAAW,CACf,cAAe,UACf,cAAe,UACf,UAAW,UACX,SAAU,UACV,oBAAqB,SAAA,EAGjBC,EAAc,MAAM,KACxB,IAAI,IAAIF,EAAK,KAAK,EAAE,IAAKG,GAAUA,EAAM,IAAI,CAAC,CAAA,EAE1CC,EAAe,OAAO,KAAKH,CAAQ,EAAE,OAAO,CAACI,EAAKC,KAClDJ,EAAY,SAASI,CAAI,IACvBD,EAAAC,CAAI,EAAIL,EAASK,CAAI,GAEpBD,GACN,CAAE,CAAA,EAEL,IAAIE,EAAU,IACVC,EAAU,KAEd,MAAMC,EAAa,OAAO,KAAKL,CAAY,EAAE,IAAKE,IAAU,CAC1D,KAAMA,EACN,KAAM,UACN,KAAM,CAAC,EACP,UAAW,CAAE,MAAOF,EAAaE,CAAI,CAAE,EACvC,WAAY,EACZ,EAAA,EAuBE,GArBCN,EAAA,QAASU,GAAQ,CAChB,MAAM,QAAQA,CAAG,EACfA,EAAA,QAASP,GAAU,CACrB,KAAM,CAAE,KAAAQ,EAAM,KAAMC,EAAS,KAAAN,EAAM,OAAAO,EAAS,EAAO,EAAAV,EAC7CW,EAAO,IAAI,KAAKF,CAAO,EACvBG,EAAOD,EAAK,SAAA,EAAaA,EAAK,WAAe,EAAA,GAC7CE,EAAYF,EAAK,SAAS,GAAK,GAAK,EAAI,EAE9CP,EAAU,KAAK,IAAIA,EAASQ,EAAO,GAAKC,CAAS,EACjDR,EAAU,KAAK,IAAIA,EAASO,EAAO,GAAKC,CAAS,EAEjD,MAAMC,EAASR,EAAW,KAAMS,GAAMA,EAAE,OAASZ,CAAI,EACjDW,GACKA,EAAA,KAAK,KAAK,CAACF,EAAO,GAAKC,EAAWL,EAAMC,EAASC,CAAM,CAAC,CACjE,CACD,EAEO,QAAA,KAAK,wCAAyCH,CAAG,CAC3D,CACD,GAEGV,GAAA,YAAAA,EAAM,UAAW,EAEjB,OAAAmB,EAAA,IAAC,OAAI,UAAU,mDACb,eAACC,EAAM,CAAA,YAAY,2BAA4B,CAAA,CACjD,CAAA,EAIJ,MAAMC,EAAS,CACb,MAAO,CAAC,EACR,OAAQ,CACN,KAAM,GACN,KAAM,OAAO,KAAKjB,CAAY,CAChC,EACA,QAAS,CACP,QAAS,OACT,YAAa,CACX,KAAM,OACR,EACA,UAAYkB,GAAW,CACrB,MAAMC,EAAY,IAAI,KAAKD,EAAO,KAAK,CAAC,CAAC,EACnCT,EAASS,EAAO,KAAK,CAAC,EACrB,MAAA,GAAGA,EAAO,UAAU,cACzBA,EAAO,KAAK,CAAC,CACf,cAAcT,CAAM,IAAIU,EAAU,UAAU,IAAIA,EAC7C,WAAW,EACX,SACA,EAAA,SAAS,EAAG,GAAG,CAAC,EACrB,CACF,EACA,MAAO,CACL,KAAM,QACN,IAAK,KAAK,MAAMhB,CAAO,EACvB,IAAK,KAAK,KAAKC,CAAO,EACtB,UAAW,CACT,UAAYgB,IACFA,GAAS,GAAKA,EAAQ,GAAKA,GAAS,KAEhD,EACA,UAAW,CAAE,KAAM,EAAM,CAC3B,EACA,MAAO,CACL,KAAM,WACN,KAAM,OACN,KAAM,CAAC,GAAG,IAAI,KAAIC,EAAAzB,GAAA,YAAAA,EAAM,SAAN,YAAAyB,EAAc,IAAKtB,GAAUA,EAAM,KAAK,CAAC,CAC7D,EACA,OAAQM,EACR,SAAU,CACR,CACE,KAAM,SACN,WAAY,EACZ,MAAOT,EAAK,OAAS,GAAK,GAAK,EAC/B,IAAK,GACP,EACA,CACE,KAAM,SACN,WAAY,EACZ,MAAOA,EAAK,OAAS,GAAK,GAAK,EAC/B,IAAK,GACP,CACF,EACA,KAAM,CACJ,IAAK,MACL,OAAQ,MACR,KAAM,KACN,MAAO,KACT,CAAA,EAGK,OAAAmB,MAACO,GAAa,OAAAL,CAAgB,CAAA,CACvC"}