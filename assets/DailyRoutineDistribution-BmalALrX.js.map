{"version":3,"mappings":"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","names":["SkeletonScatterChart","height","chartHeight","scatterPoints","gridLines","yAxisLabels","legendItems","showTitle","titleWidth","pointSize","jsx","Skeleton","jsxs","_","i","PropTypes","ScatterChart","lazy","DailyRoutineDistribution","title","color","icon","dataAnalysis","summaryProps","getTemplateData","context","useContext","CustomContext","chartToDate","chartFromDate","elderlyDetails","toDate","setToDate","useState","dayjs","fromDate","setFromDate","dailyRoutineData","setDailyRoutineData","loading","setLoading","getDailyRoutineData","useCallback","getDailyRoutine","res","transformDataDailyRoutine","err","useEffect","Template","Suspense"],"ignoreList":[],"sources":["../../src/Components/Skeleton/SkeletonScatterChart.jsx","../../src/Pages/Elderlies/Components/TabContents/Activity/Components/DailyRoutineDistribution.jsx"],"sourcesContent":["import React from \"react\";\nimport { Skeleton } from \"antd\";\nimport PropTypes from \"prop-types\";\n\nconst SkeletonScatterChart = ({\n  height = 350,\n  chartHeight = 280,\n  scatterPoints = 8,\n  gridLines = 5,\n  yAxisLabels = 5,\n  legendItems = 4,\n  showTitle = true,\n  titleWidth = \"40%\",\n  pointSize = 10,\n}) => {\n  return (\n    <div className=\"w-full flex flex-col gap-2 p-4\" style={{ height }}>\n      {/* Title placeholder */}\n      {showTitle && (\n        <Skeleton\n          active\n          paragraph={{ rows: 0 }}\n          title={{ width: titleWidth }}\n        />\n      )}\n      {/* Chart container */}\n      <div\n        className=\"relative w-full border border-gray-200 rounded-md\"\n        style={{ height: chartHeight }}\n      >\n        {/* Y-axis placeholder */}\n        <div className=\"absolute left-0 top-0 h-full w-8\">\n          <Skeleton\n            active\n            paragraph={{ rows: yAxisLabels, width: \"60%\" }}\n            title={false}\n          />\n        </div>\n        {/* X-axis placeholder */}\n        <div className=\"absolute bottom-0 left-8 right-0 h-8\">\n          <Skeleton\n            active\n            paragraph={{ rows: 1, width: [\"100%\"] }}\n            title={false}\n          />\n        </div>\n        {/* Grid lines and scatter points */}\n        <div className=\"absolute left-8 top-0 right-0 bottom-8\">\n          {/* Grid lines */}\n          <div className=\"w-full h-full flex flex-col justify-between\">\n            {[...Array(gridLines)].map((_, i) => (\n              <div key={i} className=\"w-full h-px bg-gray-100\" />\n            ))}\n          </div>\n          {/* Scatter points */}\n          <div className=\"absolute inset-0 flex flex-wrap gap-4 p-4\">\n            {[...Array(scatterPoints)].map((_, i) => (\n              <Skeleton.Node\n                key={i}\n                active\n                style={{\n                  width: pointSize,\n                  height: pointSize,\n                  borderRadius: \"50%\",\n                  position: \"absolute\",\n                  top: `${Math.random() * 80 + 10}%`,\n                  left: `${Math.random() * 80 + 10}%`,\n                }}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n      {/* Legend placeholder */}\n      {legendItems > 0 && (\n        <div className=\"flex gap-4 mt-2\">\n          {[...Array(legendItems)].map((_, i) => (\n            <Skeleton.Button\n              key={i}\n              active\n              size=\"small\"\n              style={{ width: 60 }}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nSkeletonScatterChart.propTypes = {\n  height: PropTypes.number, // Total height including title/legend\n  chartHeight: PropTypes.number, // Height of the chart area\n  scatterPoints: PropTypes.number, // Number of scatter point placeholders\n  gridLines: PropTypes.number, // Number of horizontal grid lines\n  yAxisLabels: PropTypes.number, // Number of Y-axis label placeholders\n  legendItems: PropTypes.number, // Number of legend item placeholders\n  showTitle: PropTypes.bool, // Show/hide title placeholder\n  titleWidth: PropTypes.string, // Width of title placeholder\n  pointSize: PropTypes.number, // Size of scatter points\n};\n\nexport default SkeletonScatterChart;\n","import { useState, useEffect, useContext, useCallback } from \"react\";\nimport { getDailyRoutine } from \"@/api/deviceReports\";\nimport ls from \"store2\";\nimport dayjs from \"dayjs\";\nimport Template from \"@/Components/GraphAndChartTemp/Template\";\nimport { lazy, Suspense } from \"react\";\nconst ScatterChart = lazy(() =>\n  import(\"@/Components/GraphAndChart/scatterChart\")\n);\nimport { getTemplateData } from \"@/Pages/Elderlies/Components/Utiles/utiles\";\nimport { transformDataDailyRoutine } from \"@/utils/helper\";\nimport { CustomContext } from \"@/Context/UseCustomContext\";\nimport SkeletonScatterChart from \"@/components/Skeleton/SkeletonScatterChart\"; // Import the new component\n\nexport default function DailyRoutineDistribution() {\n  const { title, color, icon, dataAnalysis, summaryProps } = getTemplateData(\n    \"Distribution of Daily Routine\"\n  );\n  const context = useContext(CustomContext);\n  const {\n    chartToDate = \"\",\n    chartFromDate = \"\",\n    elderlyDetails,\n  } = context || {};\n  const [toDate, setToDate] = useState(\n    dayjs().subtract(1, \"day\").format(\"YYYY-MM-DD\")\n  );\n  const [fromDate, setFromDate] = useState(\n    dayjs().subtract(31, \"day\").format(\"YYYY-MM-DD\")\n  );\n  const [dailyRoutineData, setDailyRoutineData] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  const getDailyRoutineData = useCallback(() => {\n    if (!elderlyDetails?.deviceId || !elderlyDetails._id) {\n      setLoading(false);\n      return;\n    }\n    setLoading(true);\n    getDailyRoutine({\n      uids: elderlyDetails?.deviceId,\n      elderly_id: elderlyDetails._id,\n      to_date: fromDate,\n      from_date: toDate,\n    })\n      .then((res) => {\n        setDailyRoutineData(transformDataDailyRoutine(res.data));\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err);\n        setLoading(false);\n      });\n  }, [toDate, fromDate, elderlyDetails]);\n\n  useEffect(() => {\n    getDailyRoutineData();\n  }, [getDailyRoutineData]);\n\n  useEffect(() => {\n    if (chartToDate && chartFromDate) {\n      setToDate(chartToDate);\n      setFromDate(chartFromDate);\n    }\n  }, [chartToDate, chartFromDate]);\n\n  return (\n    <Template\n      title={title}\n      color={color}\n      icon={icon}\n      isDataAnalysis={false}\n      dataAnalysis={dataAnalysis}\n      isSummaryBtn={false}\n    >\n      {loading ? (\n        <SkeletonScatterChart\n          height={350}\n          chartHeight={280}\n          scatterPoints={8}\n          gridLines={5}\n          yAxisLabels={5}\n          legendItems={0}\n          showTitle={false}\n          titleWidth=\"40%\"\n          pointSize={10}\n        />\n      ) : (\n        <Suspense\n          fallback={\n            <SkeletonScatterChart\n              height={350}\n              chartHeight={280}\n              scatterPoints={8}\n              gridLines={5}\n              yAxisLabels={5}\n              legendItems={4}\n              showTitle={true}\n              titleWidth=\"40%\"\n              pointSize={10}\n            />\n          }\n        >\n          <ScatterChart\n            data={dailyRoutineData}\n            colors={{\n              gotobed: \"#2EC7C9\",\n              wakeup: \"#5AB1EF\",\n              getup: \"#FFB980\",\n              fallasleep: \"#B6A2DE\",\n            }}\n          />\n        </Suspense>\n      )}\n    </Template>\n  );\n}\n"],"file":"assets/DailyRoutineDistribution-BmalALrX.js"}